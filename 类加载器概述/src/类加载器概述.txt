类加载器

1. 什么是类加载器
	* 把.class文件加载到JVM的方法区中，编程一个Class对象。
	
2. 得到类加载器
	* Class.getClassLoader()
	
3. 类加载器的分类
	他们都是片警，只管理一块区域
	* 引导：类库。即rt.jar包中的所有类，即java自己的类
	* 扩展：扩展jar包。即jre/lib/ext 目录下的所有jar包，这些jar包就是扩展jar包
	* 系统：应用下的class，包含开发人员写的类，和第三方的jar包。项目中自己写的类和第三方应用jar包
	
	* 优先级：系统>扩展>引导
	
4. 类加载器的委托机制
	* 假设代码中出现了这么一行：new A();
		> 系统发现了自己加载的类，其中包含了new A()，这说明需要系统去加载A类
		> 系统会通知扩展类去自己的库中加载A类
		> 扩展会通知引导类去自己的库中加载A类
		> 引导自己去rt.jar包中寻找A类
			* 如果找到了，那么直接加载，并返回A对应的Class对象给扩展，扩展会把这个Class返回给系统，结束；
			* 如果没找到：
				> 引导给扩展返回一个null，此时扩展去自己的库中寻找A类
					* 如果找到了，那么直接加载，并返回A对应的Class对象给系统，结束；
					* 如果没找到：
						> 扩展返回一个null给系统，系统去自己的库(应用程序下)加载A类
							* 如果找到了，那么直接加载，然后返回这个Class，结束
							* 如果没有找到，抛出ClassNotFoundException

5. 类的解析过程
	* 例子：
		class MyApp {		//被系统加载
			main(){	
				A a = new A();		//由系统加载
				String s = new String();	//有系统加载
			}
		}
		
		//定义一个同名的类
		class String {		//该class会由引导类加载器来加载，而且会直加载java自带的String.class待覆盖自定义的String类。这样更安全了，开发人员无法替换java自定义的类
			private Integer i;	//引导加载后直接继续加载Integer.class
		}

6. 自定义类加载器(了解)
	只需要两步
	* 继承ClassLoader
	* 重写findClass()方法
	
7. Tomcat的类加载器
	Tomcat提供了两种类型的加载器
	* 应用类加载器：负责加载以下两个目录下的类，[CONTEXT_HOME]\WEB-INF\lib、[CONTEXT_HOME]\WEB_INF\classes
	* 服务器类加载器：负责加载以下目录下的类，[CATALINA_HOME]\lib
	* 以上这两个加载器有个共同的特点：先从自己的目录下查找，然后再去委托其他类加载器查找
	
	* 所以Tomcat的类加载器就分为以下几类
		> 引导
		> 扩展
		> 系统
		> 应用类加载器
		> 服务类加载器
	* 优先级
		应用类加载器 > 服务器类加载器 > 系统 > 扩展 > 引导