1、什么是注解
	语法：@注解名称
	注解的作用：替代xml配置文件。servlet3.0中，就可以不再使用web.xml文件，而是所有配置都使用注解！
	注解的读取：注解是由框架来读取并使用的
	
2、注解的使用
	* 定义注解类：框架的工作
	* 使用注解：我们的工作
	* 读取注解（反射）：框架的作用
	
3、定义注解类(demo1.java)
	@interface A {}		//定义注解类。所有的注解都是Annotation的子类
	——————> 对比  <——————
	class A {}		//定义一般类
	interface A {}		//定义接口
	enum A {}		//定义枚举
	
4、使用注解
	注解的作用对象：
	* 类
	* 方法
	* 构造器
	* 参数
	* 局部变量
	* 包
	
5、注解的属性
	* 定义属性
		>格式：类型  属性名();
	* 使用注解时给属性赋值(demo2.java)
	* 注解属性的默认值：在定义注解时，可以给注解指定默认值，那么使用时就可以不给带有默认值的属性赋值
	* 名为value的属性的特权：当使用注解时，如果只给名为value的属性赋值时，可以省略"value="
	* 注解属性的类型
		> 8种基本类型
		> String
		> Enum
		> Class
		> 注解类型 
		> 以上类型的一维数组类型：若数组元素的个数为1时，可以省略大括号
		
6、注解的作用目标限定以及保存策略限定
	6.1 让一个注解，它的作用目标只能在类上，不能在方法上，这就叫作用目标限定。(Demo4.java)
		* 在定义注解时，给注解添加注解，这个注解是@Target
	6.2 保留策略(Demo5.java)
		* 实现：通过关键字@Retentation
		* 参数值： 
			> 源代码文件(SOURCE)：表示注解只在源代码中存在，当编译时就被忽略了
			> 字节码文件(CLASS)：注解在源代码中存在，然后编译时会把注解信息放到了class文件，但JVM在加载类时，会忽略注解
			> JVM中(RUNTIME)：注解在源代码、字节码文件中存在，并且在JVM加载类时，会把注解再加到JVM内存中(它是唯一可反射注解的)
			
		